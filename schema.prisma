// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                  String          @id @default(cuid())
  username            String          @unique @default("")
  email               String          @unique @default("")
  phone               String          @default("")
  firstname           String          @default("")
  lastname            String          @default("")
  role                String          @default("customer")
  permissions         String          @default("[]")
  ssid                String          @default("")
  password            String
  workOrders          WorkOrder[]     @relation("WorkOrder_creator")
  clientOrders        WorkOrder[]     @relation("WorkOrder_customer")
  applicationsToApply Application[]   @relation("Application_applicant")
  applications        Application[]   @relation("Application_creator")
  notes               Note[]          @relation("Note_creator")
  customerMovements   StockMovement[] @relation("StockMovement_customer")

  @@index([role])
}

model Note {
  id          String     @id @default(cuid())
  note        String     @default("")
  workOrder   WorkOrder? @relation("Note_workOrder", fields: [workOrderId], references: [id])
  workOrderId String?    @map("workOrder")
  creator     User?      @relation("Note_creator", fields: [creatorId], references: [id])
  creatorId   String?    @map("creator")

  @@index([workOrderId])
  @@index([creatorId])
}

model File {
  id            String       @id @default(cuid())
  name          String       @default("")
  url           String       @default("")
  application   Application? @relation("File_application", fields: [applicationId], references: [id])
  applicationId String?      @map("application")
  workOrder     WorkOrder?   @relation("File_workOrder", fields: [workOrderId], references: [id])
  workOrderId   String?      @map("workOrder")
  product       Product?     @relation("File_product", fields: [productId], references: [id])
  productId     String?      @map("product")

  @@index([applicationId])
  @@index([workOrderId])
  @@index([productId])
}

model WorkOrder {
  id           String        @id @default(cuid())
  creator      User?         @relation("WorkOrder_creator", fields: [creatorId], references: [id])
  creatorId    String?       @map("creator")
  createdAt    DateTime?     @default(now())
  images       File[]        @relation("File_workOrder")
  notes        Note[]        @relation("Note_workOrder")
  status       String        @default("pasif")
  car          Car?          @relation("WorkOrder_car", fields: [carId], references: [id])
  carId        String?       @map("car")
  customer     User?         @relation("WorkOrder_customer", fields: [customerId], references: [id])
  customerId   String?       @map("customer")
  reduction    Float?
  applications Application[] @relation("Application_workOrder")

  @@index([creatorId])
  @@index([carId])
  @@index([customerId])
}

model Application {
  id             String                @id @default(cuid())
  workOrder      WorkOrder?            @relation("Application_workOrder", fields: [workOrderId], references: [id])
  workOrderId    String?               @map("workOrder")
  images         File[]                @relation("File_application")
  startedAt      DateTime?
  finishedAt     DateTime?
  name           String                @default("")
  description    String                @default("")
  price          Float
  amount         Float
  wastage        Float?
  locations      ApplicationLocation[] @relation("Application_locations")
  product        Product?              @relation("Application_product", fields: [productId], references: [id])
  productId      String?               @map("product")
  applicant      User?                 @relation("Application_applicant", fields: [applicantId], references: [id])
  applicantId    String?               @map("applicant")
  creator        User?                 @relation("Application_creator", fields: [creatorId], references: [id])
  creatorId      String?               @map("creator")
  type           ApplicationType?      @relation("Application_type", fields: [typeId], references: [id])
  typeId         String?               @map("type")
  stockMovements StockMovement[]       @relation("StockMovement_application")

  @@index([workOrderId])
  @@index([productId])
  @@index([applicantId])
  @@index([creatorId])
  @@index([typeId])
}

model ApplicationType {
  id           String                @id @default(cuid())
  name         String                @default("")
  applications Application[]         @relation("Application_type")
  products     Product[]             @relation("Product_applicationType")
  locations    ApplicationLocation[] @relation("ApplicationLocation_applicationTypes")
}

model Product {
  id                String           @id @default(cuid())
  name              String           @default("")
  description       String           @default("")
  price             Float
  status            String           @default("aktif")
  images            File[]           @relation("File_product")
  code              String           @default("")
  ean               String           @default("")
  productBrand      ProductBrand?    @relation("Product_productBrand", fields: [productBrandId], references: [id])
  productBrandId    String?          @map("productBrand")
  pricedBy          String           @default("amount")
  applications      Application[]    @relation("Application_product")
  applicationType   ApplicationType? @relation("Product_applicationType", fields: [applicationTypeId], references: [id])
  applicationTypeId String?          @map("applicationType")
  stockMovements    StockMovement[]  @relation("StockMovement_product")
  warrantyTime      Float?
  color             String           @default("")
  width             Float?
  length            Float?

  @@index([productBrandId])
  @@index([applicationTypeId])
}

model Storage {
  id             String          @id @default(cuid())
  name           String          @default("")
  stockMovements StockMovement[] @relation("StockMovement_storage")
}

model DocumentType {
  id             String          @id @default(cuid())
  name           String          @default("")
  stockMovements StockMovement[] @relation("StockMovement_documentType")
}

model StockMovement {
  id             String        @id @default(cuid())
  product        Product?      @relation("StockMovement_product", fields: [productId], references: [id])
  productId      String?       @map("product")
  storage        Storage?      @relation("StockMovement_storage", fields: [storageId], references: [id])
  storageId      String?       @map("storage")
  amount         Float
  movementType   String        @default("giri≈ü")
  documentType   DocumentType? @relation("StockMovement_documentType", fields: [documentTypeId], references: [id])
  documentTypeId String?       @map("documentType")
  note           String        @default("")
  customer       User?         @relation("StockMovement_customer", fields: [customerId], references: [id])
  customerId     String?       @map("customer")
  date           DateTime?     @default(now())
  application    Application?  @relation("StockMovement_application", fields: [applicationId], references: [id])
  applicationId  String?       @map("application")
  createdAt      DateTime?     @default(now())

  @@index([productId])
  @@index([storageId])
  @@index([documentTypeId])
  @@index([customerId])
  @@index([applicationId])
}

model ProductBrand {
  id       String    @id @default(cuid())
  name     String    @default("")
  products Product[] @relation("Product_productBrand")
}

model Car {
  id           String      @id @default(cuid())
  vin          String      @default("")
  carModel     CarModel?   @relation("Car_carModel", fields: [carModelId], references: [id])
  carModelId   String?     @map("carModel")
  licensePlate String      @default("")
  workOrders   WorkOrder[] @relation("WorkOrder_car")

  @@index([carModelId])
}

model CarModel {
  id         String    @id @default(cuid())
  name       String    @default("")
  cars       Car[]     @relation("Car_carModel")
  carBrand   CarBrand? @relation("CarModel_carBrand", fields: [carBrandId], references: [id])
  carBrandId String?   @map("carBrand")

  @@index([carBrandId])
}

model CarBrand {
  id        String     @id @default(cuid())
  name      String     @default("")
  carModels CarModel[] @relation("CarModel_carBrand")
}

model ApplicationLocation {
  id               String            @id @default(cuid())
  name             String            @default("")
  applicationTypes ApplicationType[] @relation("ApplicationLocation_applicationTypes")
  applications     Application[]     @relation("Application_locations")
}
